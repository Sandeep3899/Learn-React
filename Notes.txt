To commit changes to github:

- git add .
- git commit -m "message"
- git push

Package.json is a configuration of npm, 
why do we need this to manage dependencies npm will take care of the version of the package

Webpack, Parcel, and Vite are popular tools in JavaScript development used for bundling and optimizing code for web applications. 
While they all serve the purpose of transforming and packaging code

In our project we are using Parcel, is a library 
# npm install -D Parcel
why -D:
there are two types of dependencies
1.Dev dependencies(development phase)
2.Normal dependencies(in production)   

to check version - npm parcel --version

In a package.json file, the caret (^) and 
tilde (~) symbols are used to define version ranges for package dependencies

- For example, ^1.2.3 would allow updates to 1.2.4, 1.3.0, or 1.9.9, but not 2.0.0.
- For example, ~1.2.3 would allow updates to 1.2.4, 1.2.5, but not 1.3.0 or 2.0.0.

package-lock.json:
This file is automatically generated and updated by npm to lock down the exact versions of all installed dependencies,
including sub-dependencies

package.json:
This file acts as the project's manifest, containing metadata about the project itself (name, version, author, license)
and defining its direct dependencies.

.gitignore- it contains files that are not required to upload to github like the node_modules


- to ignite the App - "npx parcel index.html" or "npx parcel build index.html" for production ode
- npm to install
- npx to excute the package

- to bring react into the project cdn links isn't a good way
better way is to get react as a dependencies with npm
- to install - npm install or i(shortcut for install) react not -D cause we want install react as normal dependency
- to install react dom - npm i react-dom

Parcel:(parceljs.org)
- Dev Build
- Local Server
- HMR = Hot Module Replacement
- File Watching Algorithm - written in C++
- Caching - For faster builds
- Image optimizing
- Minification
- bundling
- Compressing
- Consistent Hashing: a distributed hashing scheme that minimizes data redistribution when nodes are added or removed from a system
- Code Splitting
- Differential Bundling - support older browsers 
- Diagnostics
- Error Handling
- HTTPs
- Tree Shaking Algorithm- remove unused code for you
- Different dev and prod bundles

npx parcel build intex.html for production

- go to package.json -> scripts we can create short cut for the commands
- now instead of "npx parcel index.html" we enter "npm run start" or ("npm start" this is only work for start)


- this is more complex right? it is not developer friendly and hard to read
const heading = React.createElement("h1",{id: "heading1"}, "Learn React");
- So JSX(Jav Script React) is created, it is not a part of react both are Different
-We can build React without JSX. to simply React we use JSX
"const jsxHeading = <h1>Learn React using JSX</h1>;"
- JSX is not HTML, it looks like HTML/XML but not HTML/XML

"const jsxHeading = <h1>Learn React using JSX</h1>;"
- is this valid javascript -> NO -> JS engine cannot understand JSX
- JS enginer understand ES6(ECMAscript)
- jsx (Tranpiled before it reaches the JS engine) this is done by Parcel -> Babel(convert jsx to react code)
- attibutes are given as Camel case(camelCase)
- single line is fine, if you want to write in multiple lines wrap in ();

React Components:
- Every thing in React is a Component
- Two types of Components
1. class based - OLD way no one uses now
2. functional Component - NEW way of writing codes

- A funstion that returns a piece of JSX code
- If a function that returns a react element it is functional Component
- It starts with a Capital letter
- To render a react component we do "root.render(<HeadingComponenet />)"

8/1/2025
Building realworld application:

Step: 1 - Plan things out, then coding is easy 

For dynamic data we use Props
- Props is a short form of properties - Arguments to our functions

- Config drivin UI: Our website is drivin by data/config, controlling ui based on data. (website may vary based on location)

- clean the code

- How to loop a function we can use js map function

- not using key(not acceptable) <<<<<< using index <<<<<< using unique key(best practice)


Chapter 05: React Hooks
- structure the app using common industry methods

two types of exports as shown below
- to import 1st we need to export(
export default Header;
import Header from "./components/Header";)

- we can only have 1 default export for a file as shown above, if we need to export multiple things from a same file use
- name export 
export const Component
import {Component} from "path";
 
- Lets build a filter like top rated restaurant
- we use js filter function
onClick={() => {
            // Filter logic here
            listOfRestaurants = listOfRestaurants.filter(
              (res) => res.avgRating > "4"
            );
            console.log(listOfRestaurants);
          }}


- React is fast beacuse, it can update DOM effieiently, faster DOM manipulation
#React Hooks
- Hook is a normal JS function given by react, it comes with super power. written by Facebook developers
1. useState() - superpowerful State Variables in React. when ever state variable changes, react will rerender the component
2.useEffect() - 
these are two most important hooks we use them 99% of times

#HOW reat works in background?
- Reconciliation Algorithm (React Fiber) - React16 this algo is added

                O res-container
                |
        -----------------
        |               |   =>  UI changes -> 7 to 3 cards
        O---------------O
            7 res cards

            Virtual DOM         
-Diff Algorithm will find the difference between the updated virtual dom and the prev virtual dom and then it updates the original DOM